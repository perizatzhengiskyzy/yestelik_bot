import random
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from gtts import gTTS
import os

TOKEN = "8141970105:AAFS5aHK_QY0_i9yaoGZljAK9TnUvWYo8Z0"

WORDS = [
    {"word": "apple", "translation": "—è–±–ª–æ–∫–æ", "example": "I like to eat an apple every day."},
    {"word": "book", "translation": "–∫–Ω–∏–≥–∞", "example": "This book is very interesting."},
    {"word": "computer", "translation": "–∫–æ–º–ø—å—é—Ç–µ—Ä", "example": "I use a computer for studying."}
]

QUIZ, CHAT = range(2)

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup([
    ["üìñ –°–ª–æ–≤–æ –¥–Ω—è", "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"],
    ["üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ", "üí¨ –ß–∞—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"],
    ["üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

async def send_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    word_data = random.choice(WORDS)
    text = f"üîπ –°–ª–æ–≤–æ –¥–Ω—è: *{word_data['word']}*\n–ü–µ—Ä–µ–≤–æ–¥: _{word_data['translation']}_\n–ü—Ä–∏–º–µ—Ä: {word_data['example']}"
    
    tts = gTTS(word_data["word"], lang="en")
    tts.save("word.mp3")
    
    await update.message.reply_text(text, parse_mode="Markdown")
    with open("word.mp3", "rb") as voice_file:
        await update.message.reply_voice(voice=voice_file)
    os.remove("word.mp3")

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    word_data = random.choice(WORDS)
    context.user_data['quiz_word'] = word_data
    await update.message.reply_text(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: {word_data['word']}? –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç.")
    return QUIZ

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text.lower()
    correct_answer = context.user_data['quiz_word']['translation'].lower()
    if user_answer == correct_answer:
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    return ConversationHandler.END

async def pronunciation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.split(" ", 1)
    if len(text) == 1:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    word = text[1]
    tts = gTTS(word, lang="en")
    tts.save("pronounce.mp3")
    with open("pronounce.mp3", "rb") as voice_file:
        await update.message.reply_voice(voice=voice_file)
    os.remove("pronounce.mp3")

async def language_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º! –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
    return CHAT

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ.")
    return CHAT

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–≤ –±—É–¥—É—â–µ–º).")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üìñ –°–ª–æ–≤–æ –¥–Ω—è - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è
‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è
üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ - –û–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ
üí¨ –ß–∞—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –û–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞"""
    await update.message.reply_text(help_text, reply_markup=main_keyboard)

async def random_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    number = random.randint(1, 100)
    await update.message.reply_text(f"üé≤ –¢–µ–±–µ –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {number}")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìñ –°–ª–æ–≤–æ –¥–Ω—è":
        await send_word(update, context)
    elif text == "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞":
        await quiz(update, context)
    elif text == "üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /pronunciation —Å–ª–æ–≤–æ")
    elif text == "üí¨ –ß–∞—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º":
        await language_practice(update, context)
    elif text == "üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ":
        await random_number(update, context)
    elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings(update, context)

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("wordoftheday", send_word))
    app.add_handler(CommandHandler("quiz", quiz))
    app.add_handler(CommandHandler("pronunciation", pronunciation))
    app.add_handler(CommandHandler("languagepractice", language_practice))
    app.add_handler(CommandHandler("settings", settings))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("random", random_number))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("quiz", quiz)],
        states={
            QUIZ: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer)],
            CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, chat)]
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler)

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
    
